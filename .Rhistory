# make sure the preceding observation collapses on the last observation
df_ident_start <- df_ident
df_ident_start$time <- df_ident_start$time - 1
df_ident_start$coef <- 0
df_ident_start$sd <- 0
df_ident_start$tci <- NA
df_ident_overall <- rbind(df_ident_start, df_ident)
for(i in 1:plus_t){
intermed <- df_ident
intermed$time <- intermed$time + i
intermed$time <- ifelse(intermed$time > intermed$maxtime, intermed$maxtime, intermed$time)
df_ident_overall <- rbind(df_ident_overall, intermed)
}
df_ident_overall <- df_ident_overall[order(df_ident_overall$name, df_ident_overall$time),]
df_ident_overall <- df_ident_overall[!duplicated(df_ident_overall),]
effects <- merge(x$estimateddata, df_ident_overall, by = c("id","time"), all.x = TRUE)
# time-id pairs can also be duplicated if there are multiple rows at a time
# this is why effects can have more rows than the original data (and we need to use merge in the row below)
effects <- merge(effects,data.frame(x$estimateddata[,c("id","time")], fitted), by = c("id","time"))
effects$cf <-  (effects$coef * (-1)) +  effects$fitted
effects$cf_upr <- ((effects$coef + (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr <- ((effects$coef - (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_upr99 <- ((effects$coef + (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr99 <- ((effects$coef - (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$start_rect <- effects$origtime - effects$tci
effects$end_rect <- effects$origtime + effects$tci
effects$cf_upr[is.na(effects$cf_upr)] <- effects$fitted[is.na(effects$cf_upr)]
effects$cf_lwr[is.na(effects$cf_lwr)] <- effects$fitted[is.na(effects$cf_lwr)]
effects_filt <- effects %>% filter(id %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia"))
effects_vline <- effects_filt %>% filter(coef == 0.0000000)
sub_title <- NULL
#df <- df %>% filter(id %in% c("Wisconsin", "South Carolina"))
ggplot(effects_filt, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = effects_filt, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = effects_vline, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = effects_filt, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = effects_filt, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank()#,
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
noiis_res <- plot_counterfactual_laura_noiis(mod_noIIS$is[[1]])
noiis_res
plot_counterfactual_laura_noiis <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
if(is.null(x$isatpanel.result$fit)){
fitted <- as.numeric(x$isatpanel.result$mean.fit)
} else {
fitted <- as.numeric(x$isatpanel.result$fit)
}
max_times <- aggregate(x$estimateddata$time,by = list(x$estimateddata$id),FUN = function(x){max(x, na.rm = TRUE)})
names(max_times) <- c("id","maxtime")
df_ident <- break_uncertainty(x)
df_ident <- merge(df_ident, max_times, by = "id")
df_ident$origtime <- df_ident$time
# make sure the preceding observation collapses on the last observation
df_ident_start <- df_ident
df_ident_start$time <- df_ident_start$time - 1
df_ident_start$coef <- 0
df_ident_start$sd <- 0
df_ident_start$tci <- NA
df_ident_overall <- rbind(df_ident_start, df_ident)
for(i in 1:plus_t){
intermed <- df_ident
intermed$time <- intermed$time + i
intermed$time <- ifelse(intermed$time > intermed$maxtime, intermed$maxtime, intermed$time)
df_ident_overall <- rbind(df_ident_overall, intermed)
}
df_ident_overall <- df_ident_overall[order(df_ident_overall$name, df_ident_overall$time),]
df_ident_overall <- df_ident_overall[!duplicated(df_ident_overall),]
effects <- merge(x$estimateddata, df_ident_overall, by = c("id","time"), all.x = TRUE)
# time-id pairs can also be duplicated if there are multiple rows at a time
# this is why effects can have more rows than the original data (and we need to use merge in the row below)
effects <- merge(effects,data.frame(x$estimateddata[,c("id","time")], fitted), by = c("id","time"))
effects$cf <-  (effects$coef * (-1)) +  effects$fitted
effects$cf_upr <- ((effects$coef + (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr <- ((effects$coef - (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_upr99 <- ((effects$coef + (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr99 <- ((effects$coef - (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$start_rect <- effects$origtime - effects$tci
effects$end_rect <- effects$origtime + effects$tci
effects$cf_upr[is.na(effects$cf_upr)] <- effects$fitted[is.na(effects$cf_upr)]
effects$cf_lwr[is.na(effects$cf_lwr)] <- effects$fitted[is.na(effects$cf_lwr)]
effects_filt <- effects %>% filter(id %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia")) %>% filter(coef >= 0)
effects_vline <- effects_filt %>% filter(coef == 0.0000000)
sub_title <- NULL
#df <- df %>% filter(id %in% c("Wisconsin", "South Carolina"))
ggplot(effects_filt, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = effects_filt, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = effects_vline, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = effects_filt, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = effects_filt, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank()#,
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
plot_counterfactual_laura_noiis(mod_noIIS$is[[1]])
plot_counterfactual_laura_noiis <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
if(is.null(x$isatpanel.result$fit)){
fitted <- as.numeric(x$isatpanel.result$mean.fit)
} else {
fitted <- as.numeric(x$isatpanel.result$fit)
}
max_times <- aggregate(x$estimateddata$time,by = list(x$estimateddata$id),FUN = function(x){max(x, na.rm = TRUE)})
names(max_times) <- c("id","maxtime")
df_ident <- break_uncertainty(x)
df_ident <- merge(df_ident, max_times, by = "id")
df_ident$origtime <- df_ident$time
# make sure the preceding observation collapses on the last observation
df_ident_start <- df_ident
df_ident_start$time <- df_ident_start$time - 1
df_ident_start$coef <- 0
df_ident_start$sd <- 0
df_ident_start$tci <- NA
df_ident_overall <- rbind(df_ident_start, df_ident)
for(i in 1:plus_t){
intermed <- df_ident
intermed$time <- intermed$time + i
intermed$time <- ifelse(intermed$time > intermed$maxtime, intermed$maxtime, intermed$time)
df_ident_overall <- rbind(df_ident_overall, intermed)
}
df_ident_overall <- df_ident_overall[order(df_ident_overall$name, df_ident_overall$time),]
df_ident_overall <- df_ident_overall[!duplicated(df_ident_overall),]
effects <- merge(x$estimateddata, df_ident_overall, by = c("id","time"), all.x = TRUE)
# time-id pairs can also be duplicated if there are multiple rows at a time
# this is why effects can have more rows than the original data (and we need to use merge in the row below)
effects <- merge(effects,data.frame(x$estimateddata[,c("id","time")], fitted), by = c("id","time"))
effects$cf <-  (effects$coef * (-1)) +  effects$fitted
effects$cf_upr <- ((effects$coef + (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr <- ((effects$coef - (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_upr99 <- ((effects$coef + (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr99 <- ((effects$coef - (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$start_rect <- effects$origtime - effects$tci
effects$end_rect <- effects$origtime + effects$tci
effects$cf_upr[is.na(effects$cf_upr)] <- effects$fitted[is.na(effects$cf_upr)]
effects$cf_lwr[is.na(effects$cf_lwr)] <- effects$fitted[is.na(effects$cf_lwr)]
effects_filt <- effects %>% filter(id %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia"))
effects_vline <- effects_filt %>% filter(coef == 0.0000000)
sub_title <- NULL
#df <- df %>% filter(id %in% c("Wisconsin", "South Carolina"))
ggplot(effects_filt, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = effects_filt, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = effects_vline, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = effects_filt, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = effects_filt, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank()#,
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
noiis <- plot_counterfactual_laura_noiis(mod_noIIS$is[[1]])
noiis
iis_res
iis_res
ggsave(".\\figures\\breaks_temporary.png", plot = noiis, device = "png", width = 12, height = 12)
ggsave(".\\figures\\breaks_temporary.png", plot = noiis, device = "png", width = 3, height = 7)
ggsave(".\\figures\\breaks_temporary.png", plot = noiis, device = "png", width = 3, height = 7)
ggsave(".\\figures\\breaks_temporary.png", plot = noiis, device = "png", width = 7, height = 3)
View(df2)
df2 %>%
filter(state_name %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia"))
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia")) %>%
filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2010))-1)) ## average annual change using the CGAR formula
changes <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "SouthCarolina", "Kentucky", "DistrictofColumbia", "Tennessee", "Virginia")) %>%
filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2010))-1)) ## average annual change using the CGAR formula
changes %>%
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
filter(year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
#filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
#filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2010))-1)) ## average annual change using the CGAR formula
changes %>%
#filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
#filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
plot_grid(mod$is[[1]])
getspanel::plot_grid(mod$is[[1]])
getspanel::plot_grid(mod_noIIS$is[[1]])
install.packages("ggstream")
install.packages("ggstream")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gets)
library(getspanel)
library(here)
library(doParallel)
library(readxl)
library(gdata)
library(cowplot)
mod <- readRDS(".\\model_spec\\results\\mods_main_updatedpackage.RDS")
mod_noIIS <- readRDS(".\\model_spec\\results\\mods_main_updatedpackage_noIIS.RDS")
# install.packages("remotes")
# remotes::install_github("davidsjoberg/ggstream")
library(ggstream)
View(df)
rm(diamonds)
rm(pat)
rm(df)
library(viridis)
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_fill_viridis_c(option = "plasma", oob = scales::squish) +
theme_minimal()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_fill_viridis(option = "plasma") +
theme_minimal()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(option = "plasma", discrete = TRUE) +
theme_minimal()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(discrete = TRUE) +
theme_minimal()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(discrete = TRUE)
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream() +
scale_color_viridis(discrete = TRUE) +
theme_bw()
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(lwd = 0.25) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
color = 1
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020) %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
library(viridis)
library(ggstream)
# install.packages("ggplot2")
#cols <- c("#FFB400", "#FFC740", "#C20008", "#FF020D", "#13AFEF")
data_vline <-data.frame(state_name = unique(df2$state_name),  # Create data for lines
vline = c(2011, 2007, 2008, 2005, 2014))
d <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year < 2020)
data_vline <-data.frame(state_name = unique(d$state_name),  # Create data for lines
vline = c(2011, 2007, 2008, 2005, 2014))
data_vline <-data.frame(state_name = unique(d$state_name),  # Create data for lines
vline = c(2011, 2007, 2008, 2005, 2005, 2014))
p <- d %>%
ggplot(aes(x = prio_year, y = patent_count, fill = state_name)) +
geom_stream(color = 1, lwd = 0.25) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
p + geom_vline(data = data_vline, aes(xintercept = vline), color = "red", alpha = 0.7)
View(res)
res <- identify_effects(mod$is[[1]])
identify_effects <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
if(is.null(x$isatpanel.result$fit)){
fitted <- as.numeric(x$isatpanel.result$mean.fit)
} else {
fitted <- as.numeric(x$isatpanel.result$fit)
}
max_times <- aggregate(x$estimateddata$time,by = list(x$estimateddata$id),FUN = function(x){max(x, na.rm = TRUE)})
names(max_times) <- c("id","maxtime")
df_ident <- break_uncertainty(x)
df_ident <- merge(df_ident, max_times, by = "id")
df_ident$origtime <- df_ident$time
# make sure the preceding observation collapses on the last observation
df_ident_start <- df_ident
df_ident_start$time <- df_ident_start$time - 1
df_ident_start$coef <- 0
df_ident_start$sd <- 0
df_ident_start$tci <- NA
df_ident_overall <- rbind(df_ident_start, df_ident)
for(i in 1:plus_t){
intermed <- df_ident
intermed$time <- intermed$time + i
intermed$time <- ifelse(intermed$time > intermed$maxtime, intermed$maxtime, intermed$time)
df_ident_overall <- rbind(df_ident_overall, intermed)
}
df_ident_overall <- df_ident_overall[order(df_ident_overall$name, df_ident_overall$time),]
df_ident_overall <- df_ident_overall[!duplicated(df_ident_overall),]
effects <- merge(x$estimateddata, df_ident_overall, by = c("id","time"), all.x = TRUE)
# time-id pairs can also be duplicated if there are multiple rows at a time
# this is why effects can have more rows than the original data (and we need to use merge in the row below)
effects <- merge(effects,data.frame(x$estimateddata[,c("id","time")], fitted), by = c("id","time"))
effects$cf <-  (effects$coef * (-1)) +  effects$fitted
effects$cf_upr <- ((effects$coef + (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr <- ((effects$coef - (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_upr99 <- ((effects$coef + (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr99 <- ((effects$coef - (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$start_rect <- effects$origtime - effects$tci
effects$end_rect <- effects$origtime + effects$tci
effects$cf_upr[is.na(effects$cf_upr)] <- effects$fitted[is.na(effects$cf_upr)]
effects$cf_lwr[is.na(effects$cf_lwr)] <- effects$fitted[is.na(effects$cf_lwr)]
return(effects)
}
res <- identify_effects(mod$is[[1]])
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
#filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name)
changes <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
#filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2010))-1)) ## average annual change using the CGAR formula
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
#filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2000))-1)) ## average annual change using the CGAR formula
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
changes <- df2 %>%
select(state_name, prio_year, patent_count, log_patent_count) %>%
filter(state_name %in% c("Wisconsin", "South Carolina", "Kentucky", "District of Columbia", "Tennessee", "Virginia")) %>%
filter(prio_year %in% c(2000,2019)) %>%
group_by(state_name) %>%
mutate(change_abs = last(patent_count)-first(patent_count),               ## absolute change, or the difference in emissions between t2 and t1
change_rel = change_abs/first(patent_count),              ## relative change, or the ratio of absolute change to emissions in t1
change_avg_annual = ((last(patent_count)/first(patent_count))^(1/(2019-2000))-1)) ## average annual change using the CGAR formula
changes %>%
filter(prio_year==2019) %>% ## we dont need all the duplicated rows now
mutate(change_rel=change_rel*100) %>% ## % values for the relative change
mutate(change_avg_annual=change_avg_annual*100) ## and % for the average annual change
