mod <- readRDS(".\\model_spec\\results\\mods_main_updatedpackage.RDS")
mod_noIIS <- readRDS(".\\model_spec\\results\\mods_main_updatedpackage_noIIS.RDS")
res <- identify_effects(mod$is[[1]])
identify_effects <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
if(is.null(x$isatpanel.result$fit)){
fitted <- as.numeric(x$isatpanel.result$mean.fit)
} else {
fitted <- as.numeric(x$isatpanel.result$fit)
}
max_times <- aggregate(x$estimateddata$time,by = list(x$estimateddata$id),FUN = function(x){max(x, na.rm = TRUE)})
names(max_times) <- c("id","maxtime")
df_ident <- break_uncertainty(x)
df_ident <- merge(df_ident, max_times, by = "id")
df_ident$origtime <- df_ident$time
# make sure the preceding observation collapses on the last observation
df_ident_start <- df_ident
df_ident_start$time <- df_ident_start$time - 1
df_ident_start$coef <- 0
df_ident_start$sd <- 0
df_ident_start$tci <- NA
df_ident_overall <- rbind(df_ident_start, df_ident)
for(i in 1:plus_t){
intermed <- df_ident
intermed$time <- intermed$time + i
intermed$time <- ifelse(intermed$time > intermed$maxtime, intermed$maxtime, intermed$time)
df_ident_overall <- rbind(df_ident_overall, intermed)
}
df_ident_overall <- df_ident_overall[order(df_ident_overall$name, df_ident_overall$time),]
df_ident_overall <- df_ident_overall[!duplicated(df_ident_overall),]
effects <- merge(x$estimateddata, df_ident_overall, by = c("id","time"), all.x = TRUE)
# time-id pairs can also be duplicated if there are multiple rows at a time
# this is why effects can have more rows than the original data (and we need to use merge in the row below)
effects <- merge(effects,data.frame(x$estimateddata[,c("id","time")], fitted), by = c("id","time"))
effects$cf <-  (effects$coef * (-1)) +  effects$fitted
effects$cf_upr <- ((effects$coef + (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr <- ((effects$coef - (1.96 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_upr99 <- ((effects$coef + (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$cf_lwr99 <- ((effects$coef - (2.57 * effects$sd)) * (-1)) +  effects$fitted
effects$start_rect <- effects$origtime - effects$tci
effects$end_rect <- effects$origtime + effects$tci
effects$cf_upr[is.na(effects$cf_upr)] <- effects$fitted[is.na(effects$cf_upr)]
effects$cf_lwr[is.na(effects$cf_lwr)] <- effects$fitted[is.na(effects$cf_lwr)]
return(effects)
}
#another_function <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
# df <- x$estimateddata
#  indicators <- x$isatpanel.result$aux$mX
#  indicators <- indicators[,!colnames(indicators) %in% names(df)]
#  df <- cbind(df,indicators)
#
#  df_ident_fesis <- identify_indicator_timings(df)$fesis
#
#  return(df_ident_fesis)
#
#}
#
#another_function(mod$is[[1]])
res <- identify_effects(mod$is[[1]])
identify_indicator_timings <- function(object){
varying_vars <- names(object)[!names(object)%in% c("id","time","y","fitted")]
object_l <- reshape(object,
varying = varying_vars,
idvar = c("id","time"),
v.names = "value",
timevar = "name",
times = varying_vars,
direction = "long")
# Impulses and Steps
impulses <- object_l[grepl("iis",object_l$name) & object_l$value == 1,]
steps <- object_l[grepl("sis",object_l$name) & object_l$value == 1 & !grepl("fesis", object_l$name) & !grepl("csis", object_l$name),]
if(nrow(steps)>0){
steps <- aggregate(steps$time, by = list(id = steps$id, name = steps$name), FUN = min)
names(steps)[grep("x",names(steps))] <- "time"
steps$value <- 1
}
# FESIS
if(any(grepl("^fesis",names(object)))){
fesis_wide <- object[,grepl("^fesis", names(object)), drop = FALSE]
fesis_l <- reshape(fesis_wide,
direction = "long",
varying = names(fesis_wide),
times = names(fesis_wide),
v.names = "value",
timevar = "name")
split_list <- strsplit(x = fesis_l$name, split = "\\.")
fesis_l$id <- unlist(lapply(split_list, `[[`, 1))
fesis_l$id <- gsub("fesis","",fesis_l$id)
fesis_l$time <- unlist(lapply(split_list, `[[`, 2))
fesis_l$time <- as.numeric(fesis_l$time)
fesis_l <- fesis_l[c("id","time","name")]
fesis <- fesis_l[!duplicated(fesis_l),]
} else {fesis <- NULL}
# CFESIS
if(any(grepl("cfesis",names(object)))){
cfesis_wide <- object[,grepl("cfesis", names(object)), drop = FALSE]
cfesis_l <- reshape(cfesis_wide,
direction = "long",
varying = names(cfesis_wide),
times = names(cfesis_wide),
v.names = "value",
timevar = "name")
split_list <- strsplit(x = cfesis_l$name, split = "\\.")
cfesis_l$name <- unlist(lapply(split_list, `[[`, 1))
cfesis_l$id <- unlist(lapply(split_list, `[[`, 2))
cfesis_l$id <- gsub("cfesis","",cfesis_l$id)
cfesis_l$time <- unlist(lapply(split_list, `[[`, 3))
cfesis_l$time <- as.numeric(cfesis_l$time)
cfesis_l <- cfesis_l[c("id","time","name")]
cfesis <- cfesis_l[!duplicated(cfesis_l),]
# object %>%
#   select(contains("cfesis")) %>%
#   pivot_longer(cols = everything()) %>%
#   separate(col = "name",sep = "\\.",into = c("variable","id","time")) %>%
#   mutate(id = gsub("cfesis","",id),
#                 time = as.numeric(time)) %>%
#   select(-"value") %>%
#   distinct(across(c("variable", "time", "id"))) -> cfesis
} else {cfesis <- NULL}
# CSIS
if(any(grepl("csis",names(object)))){
csis_wide <- object[,grepl("csis", names(object)), drop = FALSE]
csis_l <- reshape(csis_wide,
direction = "long",
varying = names(csis_wide),
times = names(csis_wide),
v.names = "value",
timevar = "name")
split_list <- strsplit(x = csis_l$name, split = "\\.")
csis_l$name <- unlist(lapply(split_list, `[[`, 1))
csis_l$time <- unlist(lapply(split_list, `[[`, 2))
csis_l$time <- gsub("csis","",csis_l$time)
csis_l$time <- as.numeric(csis_l$time)
csis_l <- csis_l[c("time","name")]
csis <- csis_l[!duplicated(csis_l),]
# object %>%
#   select(contains("cfesis")) %>%
#   pivot_longer(cols = everything()) %>%
#   separate(col = "name",sep = "\\.",into = c("variable","id","time")) %>%
#   mutate(id = gsub("cfesis","",id),
#                 time = as.numeric(time)) %>%
#   select(-"value") %>%
#   distinct(across(c("variable", "time", "id"))) -> cfesis
} else {csis <- NULL}
output <- list()
output$impulses <- impulses
output$steps <- steps
output$csis <- csis
output$fesis <- fesis
output$cfesis <- cfesis
return(output)
}
res <- identify_effects(mod$is[[1]])
View(res)
res <- identify_effects(mod_noIIS$is[[1]])
res %>%
group_by(id) %>%
filter(coef >= 0)
res %>%
group_by(id) %>%
filter(coef > 0)
p <- res %>%
group_by(id) %>%
filter(coef > 0)
res %>%
group_by(id) %>%
filter(coef > 0)
mod_noIIS$iis[[1]]$estimateddata
mod_noIIS$iis[[1]][estimateddata]
mod_noIIS$is[[1]]$estimateddata
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
res1 <- res %>%
group_by(id) %>%
filter(coef > 0)
sub_title <- NULL
ggplot(res1, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res1, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = df_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res1, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res1, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
#res %>%
#  mutate(coef = case_when(coef < 0 ~ coef == NA),
#         start_rect = case_when(coef < 0 ~ start_rect == NA),
#         end_rect = case_when(coef < 0 ~ end_rect == NA),
#         cf_lwr = case_when(coef < 0 ~ cf_lwr == NA),
#         cf_upr = case_when(coef < 0 ~ cf_upr == NA),
#         cf = case_when(coef < 0 ~ cf == NA))
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
res <- identify_effects(x)
res1 <- res %>%
group_by(id) %>%
filter(coef > 0)
sub_title <- NULL
ggplot(res1, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res1, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = df_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res1, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res1, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
#res %>%
#  mutate(coef = case_when(coef < 0 ~ coef == NA),
#         start_rect = case_when(coef < 0 ~ start_rect == NA),
#         end_rect = case_when(coef < 0 ~ end_rect == NA),
#         cf_lwr = case_when(coef < 0 ~ cf_lwr == NA),
#         cf_upr = case_when(coef < 0 ~ cf_upr == NA),
#         cf = case_when(coef < 0 ~ cf == NA))
plot_counterfactual_positive(mod_noIIS$is[[1]])
res %>%
group_by(id) %>%
mutate(coef = case_when(coef <= 0 ~ coef == NA),
start_rect = case_when(coef < 0 ~ start_rect == NA),
end_rect = case_when(coef < 0 ~ end_rect == NA),
cf_lwr = case_when(coef < 0 ~ cf_lwr == NA),
cf_upr = case_when(coef < 0 ~ cf_upr == NA),
cf = case_when(coef < 0 ~ cf == NA))
res %>%
group_by(id) %>%
mutate(coef = case_when(coef <= 0 ~ coef == NA))
res <- identify_effects(mod_noIIS$is[[1]]) # take output of model without IIS and transform into dataframe
res %>%
group_by(id) %>%
mutate(coef = case_when(coef <= 0 ~ coef == NA))
res %>%
group_by(id) %>%
mutate(coef = case_when(coef <= 0 ~ NA))
res %>%
group_by(id) %>%
mutate(coef = case_when(coef =< 0 ~ NA))
res %>%
mutate(coef = case_when(coef <= 0 ~ NA))
res %>%
mutate(coef = case_when(coef >= 0 ~ NA))
res %>%
mutate(coef = case_when(coef > 0 ~ NA))
res %>%
mutate(coef = case_when(coef > 0.000000 ~ NA))
res %>%
mutate(coef = case_when(coef < 0.000000 ~ NA))
for (i in nrow(res)){
if(res$coef<=0){res$coef == NA}
}
resp <- ifelse(res$coef<=0, res$coef == NA, res$coef)
resp
resp <- ifelse(res$coef<=0, NA, res$coef)
resp
res$coef <- ifelse(res$coef<=0, NA, res$coef)
another_function(mod$is[[1]])
another_function <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
return(df_ident_fesis)
}
another_function(mod$is[[1]])
another_function <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
#df_ident_fesis <- identify_indicator_timings(df)$fesis
return(df)
}
another_function(mod$is[[1]])
another_function(mod$is[[1]])
another_function <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
df <- x$estimateddata
indicators <- x$isatpanel.result$aux$mX
indicators <- indicators[,!colnames(indicators) %in% names(df)]
df <- cbind(df,indicators)
df_ident_fesis <- identify_indicator_timings(df)$fesis
return(df_ident_fesis)
}
another_function(mod$is[[1]])
res %>%
filter(id %in% c("District of Columbia", "Kentucky", "South Carolina", "Tennessee", "Virginia", "Wisconsin"))
id <- c("District of Columbia", "Kentucky", "South Carolina", "Tennessee", "Virginia", "Wisconsin")
time <- c(2011, 2007, 2008, 2005, 2005, 2014)
my_ident_fesis <- data.frame(id, time)
View(my_ident_fesis)
rm(my_ident_fesis)
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
id <- c("District of Columbia", "Kentucky", "South Carolina", "Tennessee", "Virginia", "Wisconsin")
time <- c(2011, 2007, 2008, 2005, 2005, 2014)
my_ident_fesis <- data.frame(id, time)
res <- identify_effects(x)
res$coef <- ifelse(res$coef<=0, NA, res$coef)
sub_title <- NULL
ggplot(res1, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res1, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = my_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res1, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res1, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
plot_counterfactual_positive(mod_noIIS$is[[1]])
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
id <- c("District of Columbia", "Kentucky", "South Carolina", "Tennessee", "Virginia", "Wisconsin")
time <- c(2011, 2007, 2008, 2005, 2005, 2014)
my_ident_fesis <- data.frame(id, time)
res <- identify_effects(x)
res$coef <- ifelse(res$coef<=0, NA, res$coef)
sub_title <- NULL
ggplot(res1, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = my_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
plot_counterfactual_positive(mod_noIIS$is[[1]])
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
id <- c("District of Columbia", "Kentucky", "South Carolina", "Tennessee", "Virginia", "Wisconsin")
time <- c(2011, 2007, 2008, 2005, 2005, 2014)
my_ident_fesis <- data.frame(id, time)
res <- identify_effects(x)
res$coef <- ifelse(res$coef<=0, NA, res$coef)
sub_title <- NULL
ggplot(res, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = my_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
#start_rect = case_when(coef < 0 ~ start_rect == NA),
#         end_rect = case_when(coef < 0 ~ end_rect == NA),
#         cf_lwr = case_when(coef < 0 ~ cf_lwr == NA),
#         cf_upr = case_when(coef < 0 ~ cf_upr == NA),
#         cf = case_when(coef < 0 ~ cf == NA)
plot_counterfactual_positive(mod_noIIS$is[[1]])
plot_counterfactual_positive <- function(x, plus_t = 5, facet.scales = "free", title = NULL, zero_line = FALSE){
id <- c("DistrictofColumbia", "Kentucky", "SouthCarolina", "Tennessee", "Virginia", "Wisconsin")
time <- c(2011, 2007, 2008, 2005, 2005, 2014)
my_ident_fesis <- data.frame(id, time)
res <- identify_effects(x)
res$coef <- ifelse(res$coef<=0, NA, res$coef)
res$cf_upr <- ifelse(res$coef<=0, NA, res$cf_up)
res$cf_lwr <- ifelse(res$coef<=0, NA, res$cf_lwr)
res$cf <- ifelse(res$coef<=0, NA, res$cf)
sub_title <- NULL
ggplot(res, aes_(
x = ~time,
y = ~fitted,
group = ~id
)) -> g
if(zero_line){g = g + geom_hline(aes(yintercept = 0))}
g +
geom_line(aes_(y = ~y, color = "black"), size = 0.7) +
geom_rect(data = res, aes_(xmin = ~start_rect, xmax = ~end_rect, ymin = -Inf, ymax = Inf, group = ~name),fill = "grey",alpha = 0.1, na.rm = TRUE) +
geom_line(aes(color = "blue"),linetype = 1, size = 0.5) +
# fesis
geom_vline(data = my_ident_fesis, aes_(xintercept = ~time,color="red")) +
geom_ribbon(data = res, aes_(ymin = ~cf_lwr, ymax = ~cf_upr, fill = "red", group = ~name), alpha = 0.5, na.rm = FALSE) +
geom_line(data = res, aes_(y = ~cf, color = "red", group = ~name), na.rm = TRUE) +
# Faceting
facet_wrap("id", scales = facet.scales) +
scale_color_identity(name = NULL,
breaks = c("black", "blue", "grey", "purple", "red","darkgreen", "orange"),
labels = c("y","Fitted","IIS","SIS","FESIS","CFESIS", "CSIS"),
guide = "legend") +
scale_linetype(name = "Variable") +
guides(fill = "none") +
theme(
strip.background = element_blank(),
legend.key = element_rect(fill = NA),
panel.border = element_rect(colour = "grey",fill = NA),
panel.background = element_blank(),
) +
labs(title = title, subtitle = sub_title, y = NULL, x = NULL) -> plotoutput
return(plotoutput)
}
plot_counterfactual_positive(mod_noIIS$is[[1]])
res$cf_upr <- ifelse(res$coef<=0, NA, res$cf_up)
